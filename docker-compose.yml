services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: always
    networks: [app]
    environment:
      VITE_API_URL: /api
      VITE_API_VERSION: v0.0.2
      VITE_API_VERSION_NEW: v1
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    networks: [app]
    environment:
      DATABASE_NAME: "${DB_NAME}"
      DATABASE_USER: "${DB_USER}"
      DATABASE_PASSWORD: "${DB_PASSWORD}"
      DATABASE_HOST: postgres_db
      DATABASE_PORT: "5432"
      POSTGRES_POOL_MINSIZE: "10"
      POSTGRES_POOL_MAXSIZE: "50"
      SERVER_HOST: "0.0.0.0"
      SERVER_PORT: "8000"
      TIMEZONE: "Europe/Moscow"
      frontend_branch: "${REPO_FRONT_BRANCH}"
      mail_username: "${MAIL_USERNAME}"
      mail_password: "${MAIL_PASSWORD}"
      mail_from: "${MAIL_FROM}"
      mail_port: "${MAIL_PORT}"
      mail_server: "${MAIL_SERVER}"
      mail_ssl_tls: "True"
      mail_starttls: "False"
      use_credentials: "True"
      validate_certs: "True"
      development_mode: "${DEVELOPMENT_MODE}"
      frontend_url: "${FRONTEND_URL}"
    command: >
      bash -lc "
        alembic upgrade head &&
        uvicorn server:app --host 0.0.0.0 --port 8000 --forwarded-allow-ips=*
      "
    depends_on:
      postgres_db:
        condition: service_healthy

  postgres_db:
    image: postgres:17
    container_name: postgres_db
    environment:
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_DB: "${DB_NAME}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks: [app]
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 10

  nginx:
    image: nginx:alpine
    container_name: nginx
    depends_on:
      - frontend
      - backend
    networks: [app]
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "${NGINX_CONFIG_PATH}:/etc/nginx/nginx.conf:ro"
      - "/etc/letsencrypt:/etc/letsencrypt:ro"
      - "./nginx/logs:/var/log/nginx"

volumes:
  postgres_data:

networks:
  app:
    driver: bridge
    ipam:
      config:
        - subnet: "${SUBNET_ADDRESS}"
